import numpy as np
import datetime
import h5py
import sys
import argparse
from time import time
import re

parameter_help = """
Dataset Info
------------

seed : int64; default = 65536
    A value to initiate the random number generator. Setting to 0 will result in random seed generation based on current time.

vector_length : int
    Number of elements per vector (a.k.a "vector length"), determines number of columns in the matrix

vector_count : int
    Number of vectors to be generated, equal to number of rows in the matrix

storage : ["bool", "byte", "uint32"]; default = "byte"
    The format in which the values should be stored.
    bool: matrices are stored as bool values, single element contains single value
    byte: matrices are stored as byte/int8, single element contains 8 values (vector_length must be divisible by 8)
    uint32: matrices are stored as uint32, single element contains 32 values (vector_length must be divisible by 32)

randomization : ["mutate", "full", "sparse"]; default = "mutate"
    The way the vectors are generated.
    mutate: the template vector is generated randomly and then a percentage of the values are randomly changed to generate each vector in the matrix
    full: all vectors are completely randomly generated
    sparse: the template vector is set to zeros; the vectors in the matrix are generated by activating a percentage of random bits

active_fraction : float in range (0, 1); default 0.2
    This value is used if randomization is set to "mutate" or "sparse" as the fraction ("percentage") to determine how many bits should be manipulated.

random_fraction : float in range (0, 1); default 0.0
    !!! not implemented yet !!!
    Additional randomization for the active_fraction parameter. If above zero, the active fraction is not fixed but randomly shifted by up to <random_fraction>
    amount. E.g., if active_fraction=0.5 and random_fraction=0.2, the active fraction for each vector will be randomly selected from range (0.3, 0.7).

use_fletcher : bool; default = True
"""

# generate random seed
current_dt = datetime.datetime.now()
# seed = int(current_dt.timestamp())
seed = 65536

stamp = current_dt.strftime("%Y-%m-%d_%H-%M-%S")

use_fletcher = True
compression_level = 3

print(f"Initializing dataset generation with seed: {seed} at {stamp}.")

info = {
    "alg_version": 0.2,  # for forward compatibility only
    "seed": seed,
    "vector_length": int(2**18),
    "vector_count": int(1e4),
    "storage": "uint32",
    "randomization": "mutate",
    "active_fraction": 0.2,
    "random_fraction": 0.0,
    "stamp": stamp,
    "use_fletcher": use_fletcher,
    "compression_level": compression_level
}

# parser = argparse.ArgumentParser()
# for (k, v) in info.items():
#     ma, mb = re.search(r"^(\w)", k), re.search(r"_?(?<=\_)(\w)", k)
#     short = "-" + ma.group(0) + (mb.group(1) if mb is not None else "")

#     parser.add_argument("--" + k, short)


print(f"Settings:\n- number of vectors: {info['vector_count']}\n- vector length: {info['vector_length']}\n- storage type: {info['storage']}"
      + "\n- randomization method: {info['randomization']}\n- active fraction: {info['active_fraction']}\n- random fraction: {info['random_fraction']}"
      + "\n- version: {info['version']}")

rng = np.random.RandomState(info["seed"])

vector_shape = (int(info["vector_length"]), 1)
matrix_shape = (int(info["vector_count"]), int(info["vector_length"]))
rng_max_val = 2
dtype = np.bool

# old version
# if info["storage"] == "bool":
#     vector_shape = (info["vector_length"], 1)
#     matrix_shape = (info["vector_count"], info["vector_length"])
#     rng_max_val = 2
#     dtype = np.bool
# elif info["storage"] == "byte":
#     if info["vector_length"] % 8 != 0:
#         raise Exception("The parameter <vector_length> must be divisible by 8 when using 'byte' <storage>!")
#     vector_shape = (info["vector_length"] >> 3, 1)
#     matrix_shape = (info["vector_count"] >> 3, info["vector_length"])
#     rng_max_val = 8
#     dtype = np.bool
# elif info["storage"] == "uint32":
#     if info["vector_length"] % 32 != 0:
#         raise Exception("The parameter <vector_length> must be divisible by 32 when using 'uint32' <storage>!")
#     vector_shape = (info["vector_length"] >> 5, 1)
#     matrix_shape = (info["vector_count"] >> 5, info["vector_length"])
#     rng_max_val = 32
#     dtype = np.bool
# else:
#     raise Exception(f"Unknown storage type: {info['storage']}!")


def activate(x, f, s):
    """Activate "f" fraction of total "s" bits in the array "x"
    """
    x[rng.choice(s, int(f*s), False)] = True
    return x


def mutate(x, f, s):
    """Mutate "f" fraction of total "s" bits in the array "x"
    """
    x[rng.choice(s, int(f*s), False)] ^= True
    return x


print("Generating data...")

if info["randomization"] == "full":
    # do full randomization
    vector = rng.randint(0, rng_max_val, vector_shape, dtype)
    matrix = rng.randint(0, rng_max_val, matrix_shape, dtype)
elif info["randomization"] == "mutate":
    vector = rng.randint(0, rng_max_val, vector_shape, dtype)
    matrix = np.tile(vector.T, (matrix_shape[0], 1))
    matrix = np.apply_along_axis(mutate, 0, matrix.T, info["active_fraction"], info["vector_length"]).T
elif info["randomization"] == "sparse":
    vector = np.zeros(vector_shape, dtype=dtype)
    matrix = np.zeros(matrix_shape, dtype=dtype)
    matrix = np.apply_along_axis(activate, 0, matrix.T, 0, info["active_fraction"], info["vector_length"]).T
else:
    raise Exception(f"Unknown randomization method {info['randomization']}!")

print("Data generation complete. Compressing data (if necessary).")
# compress
order = sys.byteorder
if info["storage"] == "bool":
    pass  # no compression
elif info["storage"] == "byte":
    if info["vector_length"] % 8 != 0:
        raise Exception("The parameter 'vector_length' must be divisible by 8 when using 'byte' storage!")
    matrix = np.packbits(matrix, 1, bitorder="big").reshape(matrix_shape[0], vector_shape[0] >> 3)
    vector = np.packbits(vector, bitorder="big")[:, np.newaxis]
elif info["storage"] == "uint32":
    if info["vector_length"] % 32 != 0:
        raise Exception("The parameter 'vector_length' must be divisible by 32 when using 'uint32' storage!")
    if order == "little":
        matrix = np.packbits(matrix.reshape(-1, 4, 8)[:, ::-1], bitorder="big").view(np.uint32).reshape(matrix_shape[0], vector_shape[0] >> 5)
        vector = np.packbits(vector.reshape(-1, 4, 8)[:, ::-1], bitorder="big").view(np.uint32)[:, np.newaxis]
    else:
        matrix = np.packbits(matrix.reshape(-1, 4, 8), bitorder="big").view(np.uint32).reshape(matrix_shape[0], vector_shape[0] >> 5)
        vector = np.packbits(vector.reshape(-1, 4, 8), bitorder="big").view(np.uint32)[:, np.newaxis]
else:
    raise Exception(f"Unknown storage type: {info['storage']}!")

filename = f"bits_{info['vector_count']}x{info['vector_length']}_{info['storage']}_{info['randomization']}.hdf5"
print(f"Saving data to {filename}.")
with h5py.File(filename, "w") as f:
    f.attrs.update(**info)
    now = time()
    f.create_dataset("vector", data=vector, compression="gzip", compression_opts=compression_level, fletcher32=use_fletcher)
    vector_saving_runtime = time() - now
    print(f"Vector saved. Saving time was {vector_saving_runtime}s. Estimated matrix saving time: {vector_saving_runtime * matrix_shape[0]}s.")
    f.create_dataset("matrix", data=matrix, compression="gzip", compression_opts=compression_level, fletcher32=use_fletcher)

print("Done.")
